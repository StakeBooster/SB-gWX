{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

## Gauge
## Based on: https://github.com/curvefi/curve-dao-contracts/blob/3bee979b7b6293c9e7654ee7dfbf5cc9ff40ca58/contracts/gauges/LiquidityGaugeV5.vy

let MAX_REWARDS = 5 # FOLD<5>

let owner = this.getStringValue( "owner" ).addressFromStringValue()
let root_contract = this.getString( "root_contract" ).valueOrElse( "" )
let token = this.getStringValue( "token" )
let rewards = this.getStringValue( "rewards" )
let rewards_list = rewards.split( "," )
let period = this.getIntegerValue( "period" )
let is_killed = this.getBooleanValue( "is_killed" )
let twap = this.getString( "twap" ).valueOrElse( "" )

# RIDE HEIGHT control
let heightAddress = this.getString( "heightAddress" ).valueOrErrorMessage( "no settings defined" ).addressFromString().valueOrErrorMessage( "bad settings address" )
## DON'T CHANGE THE LINES -- HEIGHT MOCKED IN TESTS IN `height.ride`
let HEIGHT = height
##

let sync_height_key = "sync_height"
let sync_height = this.getInteger( sync_height_key ).valueOrElse( 0 )

## TOKEN ACCOUNTING

let token_amount_key = "tokens"
let token_amount = this.getInteger( token_amount_key ).valueOrElse( 0 )

func user_amount_key( user: String ) = user + "_amount"
func user_amount( user: String ) = this.getInteger( user_amount_key( user ) ).valueOrElse( 0 )

let token_locked_amount_key = "tokens_locked"
let token_locked_amount = this.getInteger( token_locked_amount_key ).valueOrElse( 0 )

let locked_period = this.getIntegerValue( "locked_period" )
func user_locked_key( user: String ) = user + "_locked"
func user_locked_values( user: String ) = # "locked_start_finish"
{
    let l = this.getString( user_locked_key( user ) ).valueOrElse( "0_0_0" ).split( "_" )
    ( l[0].parseIntValue(), l[1].parseIntValue(), l[2].parseIntValue() )
}

## USER REWARDS

func user_asset_adjusted_key( user: String, asset: String ) = user + "_" + asset + "_adjusted"
func user_asset_adjusted( user: String, asset: String ) =  this.getInteger( user_asset_adjusted_key( user, asset ) ).valueOrElse( 0 )

func user_asset_claimed_key( user: String, asset: String ) = user + "_" + asset + "_claimed"
func user_asset_claimed( user: String, asset: String ) =  this.getInteger( user_asset_claimed_key( user, asset ) ).valueOrElse( 0 )

## REWARDS

func asset_reward_key( asset: String ) = asset + "_reward"
func asset_reward( asset: String ) = this.getInteger( asset_reward_key( asset ) ).valueOrElse( 0 )

func asset_speed_key( asset: String ) = asset + "_speed"
func asset_speed( asset: String ) = this.getInteger( asset_speed_key( asset ) ).valueOrElse( 0 )

func asset_left_key( asset: String ) = asset + "_left"
func asset_left( asset: String ) = this.getInteger( asset_left_key( asset ) ).valueOrElse( 0 )

func asset_control_key( asset: String ) = asset + "_control"
func asset_control( asset: String ) = this.getInteger( asset_control_key( asset ) ).valueOrElse( 0 )

func checkAddress( a58: String ) =
{
    let a = addressFromStringValue( a58 )
    a.toString()
}

func getAddressOrAlias( string: String ) =
{
    match addressFromString( string )
    {
        case a: Address => a
        case _ => Alias( string )
    }
}

func checkAddressOrAlias( string: String ) =
{
    strict address = match addressFromString( string )
    {
        case a: Address => a
        case _ => addressFromRecipient( Alias( string ) )
    }
    string
}

func checkAsset( asset58: String ) =
{
    if( asset58 == "WAVES" ) then "WAVES" else
    let asset = asset58.fromBase58String().valueOrErrorMessage( "wrong asset encoding: " + asset58 )
    strict info = asset.assetInfo().valueOrErrorMessage( "wrong asset info: " + asset58 )
    asset58
}

func asset( a: String ) =
{
    if( a == "WAVES" ) then unit else
    fromBase58String( a )
}

func asset_string( a: ByteVector|Unit ) =
{
    match a
    {
        case b: ByteVector => toBase58String( b )
        case _ => "WAVES"
    }
}

func asset_balance( a: String ) =
{
    if( a == "WAVES" )
        then wavesBalance( this ).available
        else assetBalance( this, fromBase58String( a ) )
}

func account_rewards( asset: String, amount: Int ) =
{
    if( twap == "" ) then [] else  
    invoke( getAddressOrAlias( twap ), "push", [ asset, token, amount, token_amount, "0" ], [] )
}

func stop_rewards() =
{
    func fold( acc: List[IntegerEntry], asset: String ) =
    {
        acc
        ++
        [
            IntegerEntry( asset_speed_key( asset ), 0 )
        ]
    }

    FOLD<5>( rewards_list, [], fold )
}

func checkpoint_asset( acc: List[IntegerEntry], asset: String ) =
{
    ## BASE CLAIM

    let _asset_reward = asset_reward( asset )
    let _asset_speed = asset_speed( asset )
    let _asset_left = asset_left( asset )

    let estimate_reward = ( HEIGHT - sync_height ) * _asset_speed
    let real_reward = if( estimate_reward > _asset_left ) then _asset_left else estimate_reward

    let claim_asset_reward = _asset_reward + real_reward
    let claim_asset_left = _asset_left - real_reward
    let claim_asset_speed = if( claim_asset_left > 0 ) then _asset_speed else 0

    let reward_action = if( claim_asset_reward == _asset_reward ) then [] else [ IntegerEntry( asset_reward_key( asset ), claim_asset_reward ) ]

    ## SPEED UPDATE

    let _asset_balance = asset_balance( asset )
    let _asset_control = asset_control( asset )
    if( _asset_control > _asset_balance ) then throw( asset + " balance leakage detected: " + _asset_control.toString() + " > " + _asset_balance.toString() ) else

    let period_new_balance = _asset_balance - _asset_control
    let period_asset_balance = claim_asset_left + period_new_balance
    let period_asset_speed = period_asset_balance / period
    if( period_asset_speed <= claim_asset_speed && period_new_balance <= claim_asset_left ) then
    {
        # keep speed or zero speed
        let speed_action = if( claim_asset_speed == _asset_speed ) then [] else [ IntegerEntry( asset_speed_key( asset ), claim_asset_speed ) ]
        let left_action = if( claim_asset_left == _asset_left ) then [] else [ IntegerEntry( asset_left_key( asset ), claim_asset_left ) ]

        acc
        ++
        reward_action
        ++
        speed_action
        ++
        left_action
    }
    else
    {
        # new speed
        let period_asset_left = period_asset_speed * period
        let period_asset_dust = period_asset_balance - period_asset_left
        let period_asset_contol = _asset_balance - period_asset_dust

        strict account = account_rewards( asset, period_new_balance - period_asset_dust )

        acc
        ++
        reward_action
        ++
        [
            IntegerEntry( asset_speed_key( asset ), period_asset_speed ),
            IntegerEntry( asset_left_key( asset ), period_asset_left ),
            IntegerEntry( asset_control_key( asset ), period_asset_contol )
        ]
    }
}

func sync() =
{
    if( is_killed ) then [] else
    invoke( this, "checkpoint", [], [] )
}

func checkpoint_actions() =
{
    let sync_action = if( sync_height == HEIGHT ) then [] else [ IntegerEntry( sync_height_key, HEIGHT ) ]
    sync_action ++ FOLD<5>( rewards_list, [], checkpoint_asset )
}

func update_user( user: String, change: Int ) =
{
    let new_user_amount = user_amount( user ) + change
    if( new_user_amount < 0 ) then throw( "bad amount: " + ( -change ).toString() + ", available amount: " + user_amount( user ).toString() ) else
    let new_token_amount = token_amount + change
    # Если пересылаем средства на основной смарт, то не можем сдесь уже ссылаться на asset_balance
    if( new_token_amount + token_locked_amount > asset_balance( token ) && root_contract == "" ) then throw( "token balance leakage detected: " + new_token_amount.toString() + " > " + asset_balance( token ).toString() ) else

    strict s = if( token_amount > 0 ) then sync() else []

    func fold( acc: List[IntegerEntry], asset: String ) =
    {
        acc
        ++
        {
            let _asset_reward = asset_reward( asset )
            let _user_asset_adjusted = user_asset_adjusted( user, asset )

            let new_asset_reward = if( token_amount == 0 ) then _asset_reward else fraction( _asset_reward, new_token_amount, token_amount )
            let new_user_asset_adjusted = _user_asset_adjusted + if( new_token_amount == 0 ) then _asset_reward else -fraction( new_asset_reward, change, new_token_amount )

            let reward_action = if( _asset_reward == new_asset_reward ) then [] else [ IntegerEntry( asset_reward_key( asset ), new_asset_reward ) ]
            let adjust_action = if( _user_asset_adjusted == new_user_asset_adjusted ) then [] else [ IntegerEntry( user_asset_adjusted_key( user, asset ), new_user_asset_adjusted ) ]

            reward_action
            ++
            adjust_action
        }
    }

    let stop_actions = if( new_token_amount == 0 ) then stop_rewards() else []

    [
        IntegerEntry( token_amount_key, new_token_amount ),
        IntegerEntry( user_amount_key( user ), new_user_amount )
    ]
    ++
    FOLD<5>( rewards_list, [], fold ) # MAX_REWARDS
    ++
    stop_actions
}

func update_user_locked( caller: Address, change: Int ) =
{
    let user = caller.toString()
    let ( locked, start, finish ) = user_locked_values( user )

    if( change == -1 ) then
    {
        let speed = fraction( locked, locked_period, finish - start )
        let unlocked = fraction( speed, HEIGHT - start, locked_period )
        let available = min( [ unlocked, locked ] )
        if( locked <= 0 || available <= 0 ) then throw( "nothing to claim" ) else

        let new_locked = locked - available
        let new_start = HEIGHT
        let new_finish = finish

        [
            ScriptTransfer( caller, available, asset( token ) ),
            IntegerEntry( token_locked_amount_key, token_locked_amount - available )
        ]
        ++
        [
            if( new_locked == 0 ) then
                DeleteEntry( user_locked_key( user ) )
            else
                StringEntry( user_locked_key( user ), new_locked.toString() + "_" + new_start.toString() + "_" + new_finish.toString() )
        ]
    }
    else
    {
        let new_locked = locked + change
        let new_start = HEIGHT
        let new_finish = HEIGHT + locked_period

        [
            IntegerEntry( token_locked_amount_key, token_locked_amount + change ),
            StringEntry( user_locked_key( user ), new_locked.toString() + "_" + new_start.toString() + "_" + new_finish.toString() )
        ]
    }
}

func checkRewardsList( _rewards: String, _token: String ) =
{
    let _rewards_list = _rewards.split( "," )
    if( size( _rewards_list ) > MAX_REWARDS ) then throw( "too many rewards" ) else
    func fold( acc: List[String], asset: String ) =
    {
        if( checkAsset( asset ) == _token ) then throw( "reward cannot be the token" ) else
        if( containsElement( acc, asset ) ) then throw( "duplicated reward in list" ) else
        acc ++ [ asset ]
    }
    makeString( FOLD<5>( _rewards_list, [], fold ), "," ) # MAX_REWARDS
}

## USER FUNCTIONS

@Callable( msg )
func deposit() =
{
    if( size( msg.payments ) != 1 ) then throw( "wrong payments, should be 1 payment" ) else
    let payment = msg.payments[0]
    if( asset_string( payment.assetId ) != token ) then throw( "wrong token: " + asset_string( payment.assetId ) + " != " + token ) else
    if( payment.amount <= 0 ) then throw( "wrong amount, should be positive" ) else

    strict root_invoke_result = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "stakePoolLps", [], [payment])

    update_user( msg.caller.toString(), payment.amount )
}

@Callable( msg )
func unlock( amount: Int ) =
{
    if( size( msg.payments ) != 0 ) then throw( "wrong payments, should be empty" ) else
    if( amount <= 0 ) then throw( "wrong amount, should be positive" ) else

    strict root_contract_claim = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "claimPoolRewards", [toBase58String(this.bytes)], [])
    strict root_contract_withdrawal = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "withdrawPoolLps", [amount], [])

    update_user( msg.caller.toString(), -amount )
    ++
    update_user_locked( msg.caller, amount )
}

@Callable( msg )
func claim_unlocked() =
{
    if( size( msg.payments ) != 0 ) then throw( "wrong payments, should be empty" ) else

    update_user_locked( msg.caller, -1 )
}

@Callable( msg )
func withdraw( amount: Int ) =
{
    if( size( msg.payments ) != 0 ) then throw( "wrong payments, should be empty" ) else
    if( amount <= 0 ) then throw( "wrong amount, should be positive" ) else
    if( locked_period != 0 ) then throw( "use unlock()/claim_unlocked() while locking_period != 0" ) else

    strict root_contract_claim = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "claimPoolRewards", [toBase58String(this.bytes)], [])
    strict root_contract_withdrawal = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "withdrawPoolLps", [amount], [])

    update_user( msg.caller.toString(), -amount )
    ++
    [
        ScriptTransfer( msg.caller, amount, asset( token ) )
    ]
}

@Callable( msg )
func claim() =
{
    if( size( msg.payments ) != 0 ) then throw( "wrong payments, should be empty" ) else

    strict root_contract_claim = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "claimPoolRewards", [toBase58String(this.bytes)], [])

    strict s = if( token_amount > 0 ) then sync() else []

    let user = msg.caller.toString()
    func fold( acc: List[IntegerEntry|ScriptTransfer], asset: String ) =
    {
        acc
        ++
        {
            let _asset_reward = asset_reward( asset )

            let accumulated = user_asset_adjusted( user, asset ) + if( token_amount == 0 ) then 0 else fraction( _asset_reward, user_amount( user ), token_amount )
            let claimed = user_asset_claimed( user, asset )
            let amount = accumulated - claimed

            if( amount == 0 ) then [] else
            if( amount < 0 ) then throw( asset + " bad claim amount detected: " + amount.toString() ) else

            let _asset_control = asset_control( asset )

            [
                ScriptTransfer( msg.caller, amount, asset( asset ) ),
                IntegerEntry( user_asset_claimed_key( user, asset ), claimed + amount ),
                IntegerEntry( asset_control_key( asset ), _asset_control - amount )
            ]
        }
    }

    let claim_actions = FOLD<5>( rewards_list, [], fold ) # MAX_REWARDS
    if( size( claim_actions ) == 0 ) then throw( "nothing to claim" ) else
    claim_actions
}

## INFO FUNCTIONS

@Callable( msg )
func claimable_tokens( user: String ) =
{
    ( [], user_amount( user ) )
}

@Callable( msg )
func claimed_reward( user: String, asset: String ) =
{
    ( [], user_asset_claimed( user, asset ) )
}

@Callable( msg )
func claimable_reward( user: String, asset: String ) =
{
    strict s = if( token_amount > 0 ) then sync() else []

    let _asset_reward = asset_reward( asset )

    let accumulated = user_asset_adjusted( user, asset ) + if( token_amount == 0 ) then 0 else fraction( _asset_reward, user_amount( user ), token_amount )
    let claimed = user_asset_claimed( user, asset )
    let amount = accumulated - claimed

    ( [], amount )
}

@Callable( msg )
func user_locked_readonly( user: String ) =
{
    ( [], user_locked_values( user ) )
}

## SUPPORT FUNCTIONS

@Callable( msg )
func checkpoint() =
{
    if( is_killed ) then throw( "checkpoint is killed" ) else
    if( token_amount == 0 && msg.caller != this ) then throw( "checkpoint unavailable" ) else
    checkpoint_actions()
}

## ADMIN FUNCTIONS

@Callable( msg )
func init( _owner: String, _token: String, _rewards: String, _period: Int, _locked_period: Int, _twap: String, _root_contract: String ) =
{
    if( this.getString( "token" ).isDefined() ) then throw( "already initialized" ) else
    if( msg.caller != this ) then throw( "self initialization only" ) else
    if( _period <= 0 ) then throw( "bad period" ) else
    if( _locked_period < 0 ) then throw( "bad locked_period" ) else

    [
        StringEntry( "owner", checkAddress( _owner ) ),
        StringEntry( "token", checkAsset( _token ) ),
        StringEntry( "rewards", checkRewardsList( _rewards, _token ) ),
        IntegerEntry( "period", _period ),
        IntegerEntry( "locked_period", _locked_period ),
        StringEntry( "root_contract", if( _root_contract == "" ) then "" else checkAddressOrAlias( _root_contract ) ),
        StringEntry( "twap", if( _twap == "" ) then "" else checkAddressOrAlias( _twap ) ),
        BooleanEntry( "is_killed", false )
    ]
}

@Callable( msg )
func add_reward( reward: String ) =
{
    if( msg.caller != owner ) then throw( "only owner" ) else

    [
        StringEntry( "rewards", checkRewardsList( rewards + "," + reward, token ) )
    ]
}

@Callable( msg )
func set_killed( _is_killed: Boolean ) =
{
    if( msg.caller != owner ) then throw( "only owner" ) else
    if( is_killed == _is_killed ) then throw( "same state" ) else

    let stop_actions = if( _is_killed ) then stop_rewards() else []

    [
        BooleanEntry( "is_killed", _is_killed )
    ]
    ++
    stop_actions
}

@Callable( msg )
func claim_rewards_and_withdraw_all_tokens_from_root_contract() = {
    if( msg.caller != owner ) then throw( "only owner" ) else
    if( token_amount == 0 ) then throw( "nothing to claim" ) else

    strict root_contract_claim = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "claimPoolRewards", [toBase58String(this.bytes)], [])
    strict root_contract_withdrawal = if root_contract == "" then [] else
    invoke(getAddressOrAlias( root_contract ), "withdrawPoolLps", [token_amount], [])

    [StringEntry( "root_contract", "" )]
}

## DEVEL FUNCTIONS

@Callable( msg )
func set_height_address( _heightAddress: String ) =
{
    if( msg.caller != owner ) then throw( "only owner" ) else

    [
        StringEntry( "heightAddress", checkAddress( _heightAddress ) )
    ]
}

## MAIN CONTRACT FUNCTIONS

@Callable( msg )
func invalidate_root_contract_connection() =
{
    if root_contract == "" then throw( "root contract is not set" ) else
    if( msg.caller != getAddressOrAlias(root_contract) ) then throw( "only root contract" ) else

    [
        StringEntry( "root_contract", "" )
    ]
}

## VERIFIER FUNCTIONS

@Callable( i )
func set_verifier( verifier: String ) =
{
    if( i.caller != this ) then throw( "self call only" ) else

    let addressOK = match addressFromString( verifier )
    {
        case a: Address => true
        case _ => false
    }
    if( !addressOK  ) then throw( "verifier wrong address " + verifier ) else

    if( this.getString( "verifier" ).isDefined() ) then throw( "verifier already defined" ) else
    [
        StringEntry( "verifier", verifier )
    ]
}

@Verifier( tx )
func verify() =
{
    match this.getString( "verifier" )
    {
        case verifier:String => verifier.addressFromStringValue().getBoolean( "status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse( false )
        case _ => sigVerify( tx.bodyBytes, tx.proofs[0], tx.senderPublicKey )
    }
}
